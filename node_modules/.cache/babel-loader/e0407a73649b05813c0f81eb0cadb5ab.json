{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\julis-cleaning\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-date-picker';\nimport TimePicker from 'react-time-picker';\nimport './editservice.css';\n\nclass EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEditService = (services, serviceId) => {\n      const inputArray = document.getElementsByTagName(\"input\");\n      const currentService = services.find(service => service.id === Number(serviceId));\n      let serviceArray;\n      console.log(currentService);\n\n      if (currentService.service_type.includes(\",\")) {\n        serviceArray = currentService.service_type.split(',');\n\n        for (let i = 0; i < serviceArray.length; i++) {\n          inputArray[serviceArray[i]].click();\n        }\n      } else {\n        inputArray[currentService.service_type].click();\n      }\n\n      this.setState({\n        comments: currentService.comments,\n        best_time_reached: this.convertTime(currentService.best_time_reached)\n      });\n    };\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n      let serviceArray;\n      let serviceIndex;\n      let targetName;\n\n      if (e.target.checked) {\n        newService = this.state.service_type + ',' + e.target.name;\n        serviceArray = newService.split(',');\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        targetName = e.target.name;\n        serviceArray = this.state.service_type.split(',');\n        serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(', ');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleTime = time => {\n      console.log(time);\n      this.setState({\n        best_time_reached: time\n      });\n    };\n\n    this.convertTime = time => {\n      let realTime = time.split(\"\");\n      realTime.pop();\n      realTime.pop();\n      realTime.pop();\n      realTime = realTime.join(\"\");\n      return realTime;\n    };\n\n    this.formatTime = () => {\n      let newTime;\n      const arr = this.state.time.split(':');\n\n      if (arr[0] > 12) {\n        arr[0] = arr[0] - 12;\n        newTime = arr.join(':') + ' PM';\n      } else if (arr[0] === '00') {\n        arr[0] = '12';\n        newTime = arr.join(':') + ' AM';\n      } else if (arr[0] === '12') {\n        newTime = arr.join(':') + ' PM';\n      } else {\n        newTime = arr.join(':') + ' AM';\n      }\n\n      return newTime;\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"https://fathomless-eyrie-65525.herokuapp.com/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: \"\".concat(this.formatTime()),\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      best_time_reached: '',\n      date: new Date(),\n      price: '0.00'\n    };\n  }\n\n  componentDidMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    fetch(\"https://fathomless-eyrie-65525.herokuapp.com/user/service?id=\".concat(serviceId.id), {\n      headers: {\n        \"content-type\": \"application/json\",\n        \"authorization\": \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      this.handleEditService(resData.services, serviceId.id);\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"section\", {\n      id: \"edit_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      id: \"edit_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Edit your service.\")), React.createElement(\"div\", {\n      className: \"checkbox-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"edit_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"edit_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }), service.name))), React.createElement(\"span\", {\n      id: \"edit_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"$\", this.state.price)), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"When?\"), React.createElement(DatePicker, {\n      className: \"edit_days\",\n      value: this.state.date,\n      onChange: this.handleDay,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(TimePicker, {\n      id: \"edit_time\",\n      onChange: this.handleTime,\n      value: this.state.best_time_reached,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"textarea\", {\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      placeholder: \"Any special request?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"edit_submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}\n\nexport default withRouter(EditService);","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\julis-cleaning\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","withRouter","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleEditService","services","serviceId","inputArray","document","getElementsByTagName","currentService","find","service","id","Number","serviceArray","console","log","service_type","includes","split","i","length","click","setState","comments","best_time_reached","convertTime","handleService","e","newService","newPrice","serviceIndex","targetName","target","checked","state","name","shift","join","parseFloat","price","value","indexOf","splice","handleComments","handleDay","date","handleTime","time","realTime","pop","formatTime","newTime","arr","handlePrice","handleSubmit","preventDefault","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","day","date_modified","Date","history","push","componentDidMount","then","res","json","resData","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-date-picker';\r\nimport TimePicker from 'react-time-picker';\r\nimport './editservice.css';\r\n\r\nclass EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',\r\n            best_time_reached: '',            \r\n            date: new Date(),\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`https://fathomless-eyrie-65525.herokuapp.com/user/service?id=${serviceId.id}`, {\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                \"authorization\": `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            this.handleEditService(resData.services, serviceId.id);\r\n        });\r\n    }\r\n\r\n    handleEditService = (services, serviceId) =>{\r\n        \r\n        const inputArray = document.getElementsByTagName(\"input\");\r\n        const currentService = services.find(service => service.id === Number(serviceId));\r\n        let serviceArray;\r\n\r\n        console.log(currentService);\r\n\r\n        if(currentService.service_type.includes(\",\")){\r\n            serviceArray = currentService.service_type.split(',');\r\n            for(let i = 0; i < serviceArray.length; i++){\r\n                inputArray[serviceArray[i]].click()\r\n            }\r\n        } else{\r\n            inputArray[currentService.service_type].click();\r\n        }\r\n\r\n        this.setState({ comments: currentService.comments, best_time_reached: this.convertTime(currentService.best_time_reached)})\r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        let serviceArray;\r\n        let serviceIndex;\r\n        let targetName;\r\n\r\n        if(e.target.checked){\r\n            \r\n            newService = this.state.service_type + ',' + e.target.name;     \r\n            serviceArray = newService.split(',');      \r\n            \r\n            if(serviceArray[0] === \"\"){\r\n                serviceArray.shift();                \r\n            }\r\n            \r\n            newService = serviceArray.join(',');\r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n                        \r\n        } else{\r\n            \r\n            targetName = e.target.name\r\n            serviceArray = this.state.service_type.split(',');\r\n            serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            if(serviceArray[0] === \"\"){\r\n                serviceArray.shift()\r\n            }\r\n            \r\n            newService = serviceArray.join(', ')\r\n            \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        \r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date})\r\n    }\r\n\r\n    handleTime = (time)=>{\r\n        console.log(time)\r\n        this.setState({best_time_reached:time})\r\n    }\r\n\r\n    convertTime = (time)=>{\r\n        let realTime = time.split(\"\");\r\n        realTime.pop();\r\n        realTime.pop();\r\n        realTime.pop();\r\n\r\n        realTime = realTime.join(\"\")\r\n\r\n        return realTime;\r\n    }\r\n\r\n    formatTime = ()=>{\r\n        let newTime;\r\n        const arr = this.state.time.split(':');\r\n        if(arr[0] > 12){\r\n            arr[0] = arr[0] - 12 ;\r\n            newTime = arr.join(':') + ' PM';\r\n        } else if(arr[0] === '00'){\r\n            arr[0] = '12'\r\n            newTime = arr.join(':') + ' AM'\r\n        } else if(arr[0] === '12'){\r\n            newTime = arr.join(':') + ' PM'\r\n        }\r\n        else{\r\n            newTime = arr.join(':') + ' AM';\r\n        }\r\n        return newTime;\r\n    }\r\n    \r\n    \r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`https://fathomless-eyrie-65525.herokuapp.com/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: `${this.formatTime()}`, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state)\r\n        return (\r\n            <section id=\"edit_section\">\r\n                <form onSubmit={this.handleSubmit} id=\"edit_form\">\r\n                    <fieldset>\r\n                        <header><h1>Edit your service.</h1></header>\r\n\r\n                        <div className=\"checkbox-grid\">\r\n                            <div>\r\n                                {this.state.services.map( service => (\r\n                                    <label key={service.name} htmlFor={`edit_${service.name}`}>\r\n                                        <input type=\"checkbox\" id={`edit_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}>                               \r\n                                        </input>{service.name}\r\n                                    </label>)\r\n                                )}\r\n                            </div>\r\n\r\n                            <span id=\"edit_price\">${this.state.price}</span>\r\n                        </div>\r\n\r\n                        <label htmlFor=\"edit_day\">When?</label>\r\n                        <DatePicker className=\"edit_days\" value={this.state.date} onChange={this.handleDay} required/>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <TimePicker id=\"edit_time\" onChange={this.handleTime} value={this.state.best_time_reached} disableClock={true} />\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <textarea id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments} placeholder=\"Any special request?\"></textarea>\r\n\r\n                        <button type=\"submit\" id=\"edit_submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(EditService);"]},"metadata":{},"sourceType":"module"}