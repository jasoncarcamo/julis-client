{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\service-history\\\\ServiceHistory.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nimport { format as formatDate, getTime } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport './servicehistory.css';\nexport default class ServiceHistory extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMounted = false;\n\n    this.handleCancelService = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'DELETE',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          id: e.target.id\n        })\n      });\n      this.props.refresh();\n    };\n\n    this.state = {\n      services: [],\n      service_type: '',\n      comments: '',\n      day: '',\n      best_time_reached: '',\n      date_created: '',\n      price: ''\n    };\n  }\n\n  componentWillMount() {\n    this.isMounted = t;\n    fetch('http://localhost:8000/user/service', {\n      headers: {\n        'authorization': \"bearer \".concat(TokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      if (this.isMounted) {\n        this.setState({\n          services: resData.services\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:8000/user/service', {\n      headers: {\n        'authorization': \"bearer \".concat(TokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => this.setState({\n      services: resData.services\n    }));\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"service_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"li\", {\n      key: service.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"hi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Date set for \", formatDate(getTime(service.date_modified), 'MMM Do YYYY '), service.best_time_reached), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, service.service_type), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, service.comments), React.createElement(Link, {\n      to: \"/user/editservice?id=\".concat(service.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleCancelService,\n      id: service.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\service-history\\ServiceHistory.js"],"names":["React","TokenService","format","formatDate","getTime","Link","ServiceHistory","Component","constructor","props","isMounted","handleCancelService","e","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","id","target","refresh","state","services","service_type","comments","day","best_time_reached","date_created","price","componentWillMount","t","then","res","json","resData","setState","componentDidMount","render","map","service","date_modified"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\nimport {format as formatDate, getTime} from 'date-fns'\r\nimport {Link} from 'react-router-dom';\r\nimport './servicehistory.css';\r\n\r\n\r\nexport default class ServiceHistory extends React.Component{\r\n    \r\n    isMounted = false;\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [],\r\n            service_type: '',\r\n            comments: '',\r\n            day: '',\r\n            best_time_reached: '',\r\n            date_created: '',\r\n            price: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.isMounted = t\r\n        fetch('http://localhost:8000/user/service', {            \r\n            headers: {\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            }\r\n        })\r\n            .then( res => res.json())\r\n            .then( resData => {\r\n                if(this.isMounted){\r\n                    this.setState({services: resData.services})\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        \r\n        fetch('http://localhost:8000/user/service', {            \r\n            headers: {\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            }\r\n        })\r\n            .then( res => res.json())\r\n            .then( resData => this.setState({services: resData.services}));\r\n    }\r\n\r\n    \r\n\r\n\r\n    handleCancelService = (e)=>{\r\n        e.preventDefault()\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({id: e.target.id})\r\n\r\n        })\r\n\r\n        this.props.refresh();\r\n    }\r\n\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <section id=\"service_header\">\r\n                <ul>\r\n                    {this.state.services.map( service => (<li key={service.id}><header className=\"hi\">Date set for {formatDate(getTime(service.date_modified), 'MMM Do YYYY ')}{service.best_time_reached}</header><p>{service.service_type}</p><p>{service.comments}</p><Link to={`/user/editservice?id=${service.id}`}>Edit</Link><button type=\"button\" onClick={this.handleCancelService} id={service.id}>Cancel</button></li>))}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}