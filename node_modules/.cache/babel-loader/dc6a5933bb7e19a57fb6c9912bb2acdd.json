{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\request-service\\\\RequestService.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nexport default class RequestService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handelService = e => {\n      this.setState({\n        service_type: e.target.value\n      });\n    };\n\n    this.handleDay = e => {\n      this.setState({\n        day: e.target.value\n      });\n    };\n\n    this.handleBestTime = e => {\n      this.setState({\n        best_time_reached: e.target.value\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.day,\n          best_time_reached: this.state.best_time_reached,\n          price: this.state.price,\n          user_id: this.props.user,\n          date_modified: new Date()\n        })\n      }).then(res => res.json()).then(resData => this.props.history.push('/user/services'));\n    };\n\n    this.click = e => {\n      const newPrice = Number(this.state.price) + Number(e.target.value);\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      day: [{}],\n      service_type: '',\n      day: '',\n      best_time_reached: '',\n      comments: '',\n      price: '23'\n    };\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Make a request\"), this.state.services.map(service => React.createElement(\"label\", {\n      htmlFor: service.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"req_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.click,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"req_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"What day?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"req_day\",\n      onChange: this.handleDay,\n      value: this.state.day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_best_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"What time?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"req_best_time\",\n      onChange: this.handleBestTime,\n      value: this.state.best_time_reached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Comments?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"req_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\request-service\\RequestService.js"],"names":["React","TokenService","RequestService","Component","constructor","props","handelService","e","setState","service_type","target","value","handleDay","day","handleBestTime","best_time_reached","handleComments","comments","handlePrice","price","handleSubmit","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","state","user_id","user","date_modified","Date","then","res","json","resData","history","push","click","newPrice","Number","services","name","render","map","service"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAGA,eAAe,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA4C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA8BlBC,aA9BkB,GA8BDC,CAAD,IAAK;AACjB,WAAKC,QAAL,CAAc;AAACC,QAAAA,YAAY,EAAEF,CAAC,CAACG,MAAF,CAASC;AAAxB,OAAd;AACH,KAhCiB;;AAAA,SAkClBC,SAlCkB,GAkCLL,CAAD,IAAK;AACb,WAAKC,QAAL,CAAc;AAACK,QAAAA,GAAG,EAAEN,CAAC,CAACG,MAAF,CAASC;AAAf,OAAd;AACH,KApCiB;;AAAA,SAsClBG,cAtCkB,GAsCAP,CAAD,IAAK;AAClB,WAAKC,QAAL,CAAc;AAACO,QAAAA,iBAAiB,EAAER,CAAC,CAACG,MAAF,CAASC;AAA7B,OAAd;AACH,KAxCiB;;AAAA,SA0ClBK,cA1CkB,GA0CAT,CAAD,IAAK;AAClB,WAAKC,QAAL,CAAc;AAACS,QAAAA,QAAQ,EAAEV,CAAC,CAACG,MAAF,CAASC;AAApB,OAAd;AACH,KA5CiB;;AAAA,SA8ClBO,WA9CkB,GA8CHX,CAAD,IAAK;AACf,WAAKC,QAAL,CAAc;AAACW,QAAAA,KAAK,EAAEZ,CAAC,CAACG,MAAF,CAASC;AAAjB,OAAd;AACH,KAhDiB;;AAAA,SAmDlBS,YAnDkB,GAmDFb,CAAD,IAAK;AAChBA,MAAAA,CAAC,CAACc,cAAF;AAEAC,MAAAA,KAAK,uCAAuC;AACxCC,QAAAA,MAAM,EAAE,MADgC;AAExCC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,4CAA2BvB,YAAY,CAACwB,YAAb,EAA3B;AAFK,SAF+B;AAMxCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACnB,UAAAA,YAAY,EAAE,KAAKoB,KAAL,CAAWpB,YAA1B;AAAwCQ,UAAAA,QAAQ,EAAE,KAAKY,KAAL,CAAWZ,QAA7D;AAAuEJ,UAAAA,GAAG,EAAE,KAAKgB,KAAL,CAAWhB,GAAvF;AAA4FE,UAAAA,iBAAiB,EAAE,KAAKc,KAAL,CAAWd,iBAA1H;AAA6II,UAAAA,KAAK,EAAE,KAAKU,KAAL,CAAWV,KAA/J;AAAsKW,UAAAA,OAAO,EAAE,KAAKzB,KAAL,CAAW0B,IAA1L;AAAgMC,UAAAA,aAAa,EAAE,IAAIC,IAAJ;AAA/M,SAAf;AANkC,OAAvC,CAAL,CAQCC,IARD,CAQOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARd,EASCF,IATD,CASMG,OAAO,IAAI,KAAKhC,KAAL,CAAWiC,OAAX,CAAmBC,IAAnB,CAAwB,gBAAxB,CATjB;AAUH,KAhEiB;;AAAA,SAkElBC,KAlEkB,GAkEVjC,CAAD,IAAK;AACR,YAAMkC,QAAQ,GAAGC,MAAM,CAAC,KAAKb,KAAL,CAAWV,KAAZ,CAAN,GAA2BuB,MAAM,CAACnC,CAAC,CAACG,MAAF,CAASC,KAAV,CAAlD;AACA,WAAKH,QAAL,CAAc;AAACW,QAAAA,KAAK,EAAEsB;AAAR,OAAd;AACH,KArEiB;;AAEd,SAAKZ,KAAL,GAAa;AACTc,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,IAAI,EAAE,SADV;AAEIzB,QAAAA,KAAK,EAAE;AAFX,OADM,EAKN;AACIyB,QAAAA,IAAI,EAAE,eADV;AAEIzB,QAAAA,KAAK,EAAE;AAFX,OALM,EASN;AACIyB,QAAAA,IAAI,EAAE,OADV;AAEIzB,QAAAA,KAAK,EAAE;AAFX,OATM,CADD;AAeTN,MAAAA,GAAG,EAAE,CACD,EADC,CAfI;AAoBTJ,MAAAA,YAAY,EAAE,EApBL;AAqBTI,MAAAA,GAAG,EAAE,EArBI;AAsBTE,MAAAA,iBAAiB,EAAE,EAtBV;AAuBTE,MAAAA,QAAQ,EAAE,EAvBD;AAwBTE,MAAAA,KAAK,EAAE;AAxBE,KAAb;AA0BH;;AA0CD0B,EAAAA,MAAM,GAAE;AAEJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,QAAQ,EAAE,KAAKzB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEC,KAAKS,KAAL,CAAWc,QAAX,CAAoBG,GAApB,CAAyBC,OAAO,IAAK;AAAO,MAAA,OAAO,EAAEA,OAAO,CAACH,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,gBAASG,OAAO,CAACH,IAAjB,CAAzB;AAAkD,MAAA,IAAI,EAAEG,OAAO,CAACH,IAAhE;AAAsE,MAAA,KAAK,EAAEG,OAAO,CAAC5B,KAArF;AAA2F,MAAA,QAAQ,EAAE,KAAKqB,KAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,EAAwJO,OAAO,CAACH,IAAhK,CAArC,CAFD,EAII;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJJ,EAKI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,SAAtB;AAAgC,MAAA,QAAQ,EAAE,KAAKhC,SAA/C;AAA0D,MAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWhB,GAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAOI;AAAO,MAAA,OAAO,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,EAQI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,eAAtB;AAAsC,MAAA,QAAQ,EAAE,KAAKC,cAArD;AAAqE,MAAA,KAAK,EAAE,KAAKe,KAAL,CAAWd,iBAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAUI;AAAO,MAAA,OAAO,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAVJ,EAWI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,cAAtB;AAAqC,MAAA,QAAQ,EAAE,KAAKC,cAApD;AAAoE,MAAA,KAAK,EAAE,KAAKa,KAAL,CAAWZ,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM,KAAKY,KAAL,CAAWV,KAAjB,CAbJ,EAeI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ,CADJ,CADJ,CADJ;AAuBH;;AAhGsD","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\n\r\n\r\nexport default class RequestService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            day: [\r\n                {\r\n\r\n                }\r\n            ],\r\n            service_type: '',\r\n            day: '',\r\n            best_time_reached: '',\r\n            comments: '',\r\n            price: '23'\r\n        }\r\n    }\r\n\r\n    handelService = (e)=>{\r\n        this.setState({service_type: e.target.value});\r\n    }\r\n\r\n    handleDay = (e)=>{\r\n        this.setState({day: e.target.value});\r\n    }\r\n\r\n    handleBestTime = (e)=>{\r\n        this.setState({best_time_reached: e.target.value});\r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({comments: e.target.value});\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({price: e.target.value});\r\n    }\r\n\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.day, best_time_reached: this.state.best_time_reached, price: this.state.price, user_id: this.props.user, date_modified: new Date()})\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => this.props.history.push('/user/services'));\r\n    }\r\n\r\n    click= (e)=>{\r\n        const newPrice = Number(this.state.price) + Number(e.target.value)\r\n        this.setState({price: newPrice})\r\n    }\r\n    render(){\r\n        \r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        <header>Make a request</header>\r\n                    {this.state.services.map( service => (<label htmlFor={service.name}><input type=\"checkbox\" id={`req_${service.name}`} name={service.name} value={service.price}onChange={this.click}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"req_day\">What day?</label>\r\n                        <input type=\"text\" id=\"req_day\" onChange={this.handleDay} value={this.state.day}></input>\r\n\r\n                        <label htmlFor=\"req_best_time\">What time?</label>\r\n                        <input type=\"text\" id=\"req_best_time\" onChange={this.handleBestTime} value={this.state.best_time_reached}></input>\r\n\r\n                        <label htmlFor=\"req_comments\">Comments?</label>\r\n                        <input type=\"text\" id=\"req_comments\" onChange={this.handleComments} value={this.state.comments}></input>\r\n\r\n                        <h2>${this.state.price}</h2> \r\n\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}