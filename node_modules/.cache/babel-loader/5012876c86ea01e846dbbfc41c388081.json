{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\request-service\\\\RequestService.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nexport default class RequestService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      if (e.target.checked) {}\n\n      const newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleDay = e => {\n      this.setState({\n        day: e.target.value\n      });\n    };\n\n    this.handleBestTime = e => {\n      this.setState({\n        best_time_reached: e.target.value\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.day,\n          best_time_reached: this.state.best_time_reached,\n          price: this.state.price,\n          user_id: this.props.user,\n          date_modified: new Date()\n        })\n      }).then(res => res.json()).then(resData => this.props.history.push('/user/services'));\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      days: [{\n        day: 'Sunday'\n      }, {\n        day: 'Monday'\n      }, {\n        day: 'Tuesday'\n      }, {\n        day: 'Wednesday'\n      }, {\n        day: 'Thursday'\n      }, {\n        day: 'Friday'\n      }, {\n        day: 'Saturday'\n      }],\n      service_type: '',\n      day: '',\n      best_time_reached: '',\n      comments: '',\n      price: '0.00'\n    };\n  }\n\n  render() {\n    console.log(this.state.day);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Make a request\"), this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"req_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"req_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"req_days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"When?\"), React.createElement(\"select\", {\n      id: \"req_days\",\n      onChange: this.handleDay,\n      value: this.state.day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.days.map(day => React.createElement(\"option\", {\n      key: day.day,\n      value: day.day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, day.day))), React.createElement(\"label\", {\n      htmlFor: \"req_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"What time?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"req_time\",\n      onChange: this.handleBestTime,\n      value: this.state.best_time_reached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Comments?\"), React.createElement(\"textarea\", {\n      id: \"req_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\request-service\\RequestService.js"],"names":["React","TokenService","RequestService","Component","constructor","props","handleService","e","target","checked","newPrice","parseFloat","state","price","value","setState","handleDay","day","handleBestTime","best_time_reached","handleComments","comments","handlePrice","handleSubmit","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","service_type","user_id","user","date_modified","Date","then","res","json","resData","history","push","services","name","days","render","console","log","map","service"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\n\r\n\r\nexport default class RequestService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            days: [\r\n                {\r\n                    day: 'Sunday'\r\n                },\r\n                {\r\n                    day: 'Monday'    \r\n                },\r\n                {\r\n                    day: 'Tuesday'\r\n                },\r\n                {\r\n                   day: 'Wednesday'\r\n                },\r\n                {\r\n                    day: 'Thursday'\r\n                },\r\n                {\r\n                    day: 'Friday'\r\n                },\r\n                {\r\n                    day: 'Saturday'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            day: '',\r\n            best_time_reached: '',\r\n            comments: '',\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    handleService= (e)=>{\r\n        if(e.target.checked){}\r\n        const newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n        this.setState({price: newPrice})\r\n    }\r\n\r\n    handleDay = (e)=>{\r\n        this.setState({day: e.target.value});        \r\n    }\r\n\r\n    handleBestTime = (e)=>{\r\n        this.setState({best_time_reached: e.target.value});\r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({comments: e.target.value});\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({price: e.target.value});\r\n    }\r\n\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.day, best_time_reached: this.state.best_time_reached, price: this.state.price, user_id: this.props.user, date_modified: new Date()})\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => this.props.history.push('/user/services'));\r\n    }\r\n\r\n    \r\n    render(){\r\n        console.log(this.state.day)\r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        <header>Make a request</header>\r\n                        \r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`req_${service.name}`}><input type=\"checkbox\" id={`req_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"req_days\">When?</label>\r\n                        <select id=\"req_days\" onChange={this.handleDay} value={this.state.day}>\r\n                            {this.state.days.map( day => (<option key={day.day} value={day.day}>{day.day}</option>))}\r\n                        </select>\r\n\r\n                        <label htmlFor=\"req_time\">What time?</label>\r\n                        <input type=\"text\" id=\"req_time\" onChange={this.handleBestTime} value={this.state.best_time_reached}></input>\r\n\r\n                        <label htmlFor=\"req_comments\">Comments?</label>\r\n                        <textarea id=\"req_comments\" onChange={this.handleComments} value={this.state.comments}></textarea>\r\n\r\n                        <span>${this.state.price}</span> \r\n\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}