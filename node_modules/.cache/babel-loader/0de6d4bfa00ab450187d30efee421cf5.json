{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\verify\\\\ResendVerificaton.js\";\nimport React from 'react';\nimport AuthService from '../../services/AuthService';\nimport queryString from 'query-string';\nimport nodemailer from 'nodemailer';\nexport default class ResendVerification extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNumber = e => {\n      this.setState({\n        mobile_number: e.target.value\n      });\n    };\n\n    this.handlePassword = e => {\n      this.setState({\n        password: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n          user: process.env.EMAIL,\n          pass: process.env.EMAIL_PASS\n        }\n      });\n      AuthService.postLogin(this.state.mobile_number, this.state.password).then(res => {\n        if (res) {\n          this.setState({\n            email: res.email\n          });\n          this.setState({\n            sent: true\n          });\n          let mailOptions = {\n            from: 'jasoncarcamo30@gmail.com',\n            to: \"\".concat(res.email),\n            subject: 'verify your email',\n            html: \"<main><a href=\\\"http:localhost:3000/api/verify?token=\".concat(res.authToken, \"&id=\").concat(res.id, \">http:localhost:3000/api/verify?token=\").concat(res.authToken, \"&id=\").concat(res.id, \"</a></main>\")\n          };\n          transporter.sendMail(mailOptions, (error, info) => {\n            if (error) {\n              console.log('Hello', error);\n            } else {\n              console.log(info.response);\n            }\n          });\n        } else {\n          console.log('Nope');\n        }\n      });\n    };\n\n    this.state = {\n      mobile_number: '',\n      password: '',\n      email: '',\n      sent: false,\n      error: ''\n    };\n  }\n\n  render() {\n    const query = queryString.parse(this.props.location.search);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.sent ? React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Please confirm email: \", this.state.email) : React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"ver_email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Mobile Number:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"ver_email\",\n      onChange: this.handleNumber,\n      value: this.state.mobile_number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"ver_password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Password:\"), React.createElement(\"input\", {\n      type: \"password\",\n      id: \"ver_pass\",\n      onChange: this.handlePassword,\n      value: this.state.password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\verify\\ResendVerificaton.js"],"names":["React","AuthService","queryString","nodemailer","ResendVerification","Component","constructor","props","handleNumber","e","setState","mobile_number","target","value","handlePassword","password","handleSubmit","preventDefault","transporter","createTransport","service","auth","user","process","env","EMAIL","pass","EMAIL_PASS","postLogin","state","then","res","email","sent","mailOptions","from","to","subject","html","authToken","id","sendMail","error","info","console","log","response","render","query","parse","location","search"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAIA,eAAe,MAAMC,kBAAN,SAAiCJ,KAAK,CAACK,SAAvC,CAAgD;AAE3DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAWlBC,YAXkB,GAWFC,CAAD,IAAK;AAChB,WAAKC,QAAL,CAAc;AAACC,QAAAA,aAAa,EAAEF,CAAC,CAACG,MAAF,CAASC;AAAzB,OAAd;AACH,KAbiB;;AAAA,SAelBC,cAfkB,GAeAL,CAAD,IAAK;AAClB,WAAKC,QAAL,CAAc;AAAEK,QAAAA,QAAQ,EAAEN,CAAC,CAACG,MAAF,CAASC;AAArB,OAAd;AACH,KAjBiB;;AAAA,SAmBlBG,YAnBkB,GAmBFP,CAAD,IAAK;AAChBA,MAAAA,CAAC,CAACQ,cAAF;AAEA,UAAIC,WAAW,GAAGf,UAAU,CAACgB,eAAX,CAA2B;AACzCC,QAAAA,OAAO,EAAE,OADgC;AAEzCC,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,KADhB;AAEFC,UAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAFhB;AAFmC,OAA3B,CAAlB;AASA1B,MAAAA,WAAW,CAAC2B,SAAZ,CAAsB,KAAKC,KAAL,CAAWlB,aAAjC,EAAgD,KAAKkB,KAAL,CAAWd,QAA3D,EACKe,IADL,CACWC,GAAG,IAAG;AAET,YAAGA,GAAH,EAAO;AACH,eAAKrB,QAAL,CAAc;AAAEsB,YAAAA,KAAK,EAAED,GAAG,CAACC;AAAb,WAAd;AACA,eAAKtB,QAAL,CAAc;AAAEuB,YAAAA,IAAI,EAAE;AAAR,WAAd;AAEA,cAAIC,WAAW,GAAE;AACbC,YAAAA,IAAI,EAAE,0BADO;AAEbC,YAAAA,EAAE,YAAKL,GAAG,CAACC,KAAT,CAFW;AAGbK,YAAAA,OAAO,EAAE,mBAHI;AAIbC,YAAAA,IAAI,iEAAyDP,GAAG,CAACQ,SAA7D,iBAA6ER,GAAG,CAACS,EAAjF,mDAA4HT,GAAG,CAACQ,SAAhI,iBAAgJR,GAAG,CAACS,EAApJ;AAJS,WAAjB;AAOAtB,UAAAA,WAAW,CAACuB,QAAZ,CAAqBP,WAArB,EAAkC,CAACQ,KAAD,EAAQC,IAAR,KAAe;AAC7C,gBAAGD,KAAH,EAAS;AACLE,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,KAApB;AACH,aAFD,MAEM;AACFE,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAjB;AACH;AACJ,WAND;AAOH,SAlBD,MAkBO;AACHF,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AACJ,OAxBL;AAyBH,KAxDiB;;AAEd,SAAKhB,KAAL,GAAa;AACTlB,MAAAA,aAAa,EAAE,EADN;AAETI,MAAAA,QAAQ,EAAE,EAFD;AAGTiB,MAAAA,KAAK,EAAE,EAHE;AAITC,MAAAA,IAAI,EAAE,KAJG;AAKTS,MAAAA,KAAK,EAAE;AALE,KAAb;AAOH;;AAkDDK,EAAAA,MAAM,GAAE;AACJ,UAAMC,KAAK,GAAG9C,WAAW,CAAC+C,KAAZ,CAAkB,KAAK1C,KAAL,CAAW2C,QAAX,CAAoBC,MAAtC,CAAd;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKtB,KAAL,CAAWI,IAAX,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA2B,KAAKJ,KAAL,CAAWG,KAAtC,CAAlB,GAAsE;AAAM,MAAA,QAAQ,EAAE,KAAKhB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAkC,MAAA,QAAQ,EAAE,KAAKR,YAAjD;AAA+D,MAAA,KAAK,EAAE,KAAKqB,KAAL,CAAWlB,aAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAO,MAAA,OAAO,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,EAII;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,EAAE,EAAC,UAA1B;AAAqC,MAAA,QAAQ,EAAE,KAAKG,cAApD;AAAoE,MAAA,KAAK,EAAE,KAAKe,KAAL,CAAWd,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADmE,CAD3E,CADJ;AAaH;;AA7E0D","sourcesContent":["import React from 'react';\r\nimport AuthService from '../../services/AuthService';\r\nimport queryString from 'query-string';\r\nimport nodemailer from 'nodemailer';\r\n\r\n\r\n\r\nexport default class ResendVerification extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            mobile_number: '',\r\n            password: '',\r\n            email: '',\r\n            sent: false,\r\n            error: ''\r\n        }\r\n    }\r\n\r\n    handleNumber = (e)=>{\r\n        this.setState({mobile_number: e.target.value})\r\n    }\r\n\r\n    handlePassword = (e)=>{\r\n        this.setState({ password: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        let transporter = nodemailer.createTransport({\r\n            service: 'gmail',\r\n            auth: {\r\n                user: process.env.EMAIL,\r\n                pass: process.env.EMAIL_PASS\r\n            }            \r\n        });\r\n\r\n\r\n        AuthService.postLogin(this.state.mobile_number, this.state.password)\r\n            .then( res=> {\r\n                \r\n                if(res){\r\n                    this.setState({ email: res.email});\r\n                    this.setState({ sent: true});\r\n\r\n                    let mailOptions ={\r\n                        from: 'jasoncarcamo30@gmail.com',\r\n                        to: `${res.email}`,\r\n                        subject: 'verify your email',\r\n                        html: `<main><a href=\"http:localhost:3000/api/verify?token=${res.authToken}&id=${res.id}>http:localhost:3000/api/verify?token=${res.authToken}&id=${res.id}</a></main>`\r\n                    }\r\n\r\n                    transporter.sendMail(mailOptions, (error, info)=>{\r\n                        if(error){\r\n                            console.log('Hello',error);\r\n                        } else{\r\n                            console.log(info.response)\r\n                        }\r\n                    })\r\n                } else {\r\n                    console.log('Nope')\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    render(){\r\n        const query = queryString.parse(this.props.location.search);\r\n\r\n        return (\r\n            <section>\r\n                {this.state.sent ? <h3>Please confirm email: {this.state.email}</h3> : <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        <label htmlFor=\"ver_email\">Mobile Number:</label>\r\n                        <input type=\"text\" id=\"ver_email\" onChange={this.handleNumber} value={this.state.mobile_number}></input>\r\n                        <label htmlFor=\"ver_password\">Password:</label>\r\n                        <input type=\"password\" id=\"ver_pass\" onChange={this.handlePassword} value={this.state.password}></input>\r\n                        <button type=\"submit\"></button>\r\n                    </fieldset>\r\n                </form>}\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}