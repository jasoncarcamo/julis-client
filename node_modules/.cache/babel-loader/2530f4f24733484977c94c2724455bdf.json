{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\request-service\\\\RequestService.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nimport DatePicker from 'react-date-picker';\nimport TimePicker from 'react-time-picker';\nimport './requestservice.css';\nexport default class RequestService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n      let serviceArray;\n      let serviceIndex;\n      let targetName;\n\n      if (e.target.checked) {\n        newService = this.state.service_type + ',' + e.target.name;\n        serviceArray = newService.split(',');\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(', ');\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        targetName = e.target.name;\n        serviceArray = this.state.service_type.split(',');\n        serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleBestTime = time => {\n      this.setState({\n        time\n      });\n    };\n\n    this.formatTime = () => {\n      let newTime;\n      const arr = this.state.time.split(':');\n\n      if (arr[0] > 12) {\n        arr[0] = arr[0] - 12;\n        newTime = arr.join(':') + ' PM';\n      } else if (arr[0] === '00') {\n        arr[0] = '12';\n        newTime = arr.join(':') + ' AM';\n      } else if (arr[0] === '12') {\n        newTime = arr.join('');\n      } else {\n        newTime = arr.join(':') + ' AM';\n      }\n\n      return newTime;\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: \"\".concat(this.formatTime()),\n          price: this.state.price,\n          user_id: this.props.user,\n          date_modified: new Date()\n        })\n      }).then(res => res.json()).then(resData => this.props.history.push('/user/services'));\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      date: new Date(),\n      service_type: '',\n      time: '',\n      comments: '',\n      price: '0.00'\n    };\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"req_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      id: \"req_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Make a request\")), this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"req_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"req_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"req_days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"When?\"), React.createElement(DatePicker, {\n      value: this.state.date,\n      onChange: this.handleDay,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"What time?\"), React.createElement(TimePicker, {\n      id: \"req-time\",\n      onChange: this.handleBestTime,\n      value: this.state.time,\n      disableClock: true,\n      format: \"hh:mm a\",\n      amPmAriaLabel: \"PM\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Comments?\"), React.createElement(\"textarea\", {\n      id: \"req_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      placeholder: \"Any important comments?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"req_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"req_submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\request-service\\RequestService.js"],"names":["React","TokenService","DatePicker","TimePicker","RequestService","Component","constructor","props","handleService","e","newService","newPrice","serviceArray","serviceIndex","targetName","target","checked","state","service_type","name","split","shift","join","parseFloat","price","value","indexOf","splice","setState","handleDay","date","handleBestTime","time","formatTime","newTime","arr","handleComments","comments","handlePrice","handleSubmit","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","day","best_time_reached","user_id","user","date_modified","Date","then","res","json","resData","history","push","services","render","map","service"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\nimport DatePicker from 'react-date-picker'\r\nimport TimePicker from 'react-time-picker';\r\nimport './requestservice.css'\r\n\r\n\r\nexport default class RequestService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            date: new Date(),\r\n            service_type: '',\r\n            time: '',\r\n            comments: '',\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        let serviceArray;\r\n        let serviceIndex;\r\n        let targetName;\r\n\r\n        if(e.target.checked){\r\n            \r\n            newService = this.state.service_type + ',' + e.target.name;     \r\n            serviceArray = newService.split(',');      if(serviceArray[0] === \"\"){\r\n                serviceArray.shift();                \r\n            }\r\n            \r\n            newService = serviceArray.join(', ');\r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n                        \r\n        } else{\r\n            \r\n            targetName = e.target.name\r\n            serviceArray = this.state.service_type.split(',');\r\n            serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            if(serviceArray[0] === \"\"){\r\n                serviceArray.shift()\r\n            }\r\n            \r\n            newService = serviceArray.join(',')\r\n            \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n              \r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date});        \r\n    }\r\n\r\n    handleBestTime = (time)=>{\r\n        \r\n        this.setState({time});\r\n    }\r\n\r\n    formatTime = ()=>{\r\n        let newTime;\r\n        const arr = this.state.time.split(':');\r\n        if(arr[0] > 12){\r\n            arr[0] = arr[0] - 12 ;\r\n            newTime = arr.join(':') + ' PM';\r\n        } else if(arr[0] === '00'){\r\n            arr[0] = '12'\r\n            newTime = arr.join(':') + ' AM'\r\n        } else if(arr[0] === '12'){\r\n            newTime = arr.join('')\r\n        }\r\n        else{\r\n            newTime = arr.join(':') + ' AM';\r\n        }\r\n        return newTime;\r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({comments: e.target.value});\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({price: e.target.value});\r\n    }\r\n\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: `${this.formatTime()}`, price: this.state.price, user_id: this.props.user, date_modified: new Date()})\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => this.props.history.push('/user/services'));\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    render(){\r\n      \r\n        return (\r\n            <section id=\"req_section\">\r\n                <form onSubmit={this.handleSubmit} id=\"req_form\">\r\n                    \r\n                    <fieldset>\r\n                        <header><h1>Make a request</h1></header>\r\n                        \r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`req_${service.name}`}><input type=\"checkbox\" id={`req_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"req_days\">When?\r\n                        </label>\r\n                        <DatePicker value={this.state.date} onChange={this.handleDay} required/>\r\n\r\n                        <label htmlFor=\"req_time\">What time?</label>\r\n                        <TimePicker id=\"req-time\" onChange={this.handleBestTime} value={this.state.time} disableClock={true} format=\"hh:mm a\" amPmAriaLabel=\"PM\"/>\r\n\r\n                        <label htmlFor=\"req_comments\">Comments?</label>\r\n                        <textarea id=\"req_comments\" onChange={this.handleComments} value={this.state.comments} placeholder=\"Any important comments?\"></textarea>\r\n\r\n                        <span id=\"req_price\">${this.state.price}</span> \r\n\r\n                        <button type=\"submit\" id=\"req_submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}