{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-date-picker';\nimport TimePicker from 'react-time-picker';\nimport './editservice.css';\n\nclass EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n      let serviceArray;\n      let serviceIndex;\n      let targetName;\n\n      if (e.target.checked) {\n        newService = this.state.service_type + ',' + e.target.name;\n        serviceArray = newService.split(',');\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        targetName = e.target.name;\n        serviceArray = this.state.service_type.split(',');\n        serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n\n        if (serviceArray[0] === \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(', ');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleTime = time => {\n      this.setState({\n        time\n      });\n    };\n\n    this.formatTime = () => {\n      let newTime;\n      const arr = this.state.time.split(':');\n\n      if (arr[0] > 12) {\n        arr[0] = arr[0] - 12;\n        newTime = arr.join(':') + ' PM';\n      } else if (arr[0] === '00') {\n        arr[0] = '12';\n        newTime = arr.join(':') + ' AM';\n      } else if (arr[0] === '12') {\n        newTime = arr.join(':') + ' PM';\n      } else {\n        newTime = arr.join(':') + ' AM';\n      }\n\n      return newTime;\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: \"\".concat(this.formatTime()),\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      time: '',\n      date: new Date(),\n      price: '0.00'\n    };\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"edit_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      id: \"edit_form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Edit your service.\")), React.createElement(\"div\", {\n      className: \"cheackbox-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"edit_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"edit_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), service.name))), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"textarea\", {\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"When?\"), React.createElement(DatePicker, {\n      className: \"edit_days\",\n      value: this.state.date,\n      onChange: this.handleDay,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(TimePicker, {\n      id: \"edit_time\",\n      onChange: this.handleTime,\n      value: this.state.time,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"edit_submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}\n\nexport default withRouter(EditService);","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","withRouter","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleService","e","newService","newPrice","serviceArray","serviceIndex","targetName","target","checked","state","service_type","name","split","shift","join","parseFloat","price","value","indexOf","splice","setState","handleComments","comments","handleDay","date","handleTime","time","formatTime","newTime","arr","handlePrice","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","day","best_time_reached","id","date_modified","Date","history","push","services","render","map","service"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-date-picker';\r\nimport TimePicker from 'react-time-picker';\r\nimport './editservice.css';\r\n\r\nclass EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',\r\n            time: '',            \r\n            date: new Date(),\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        let serviceArray;\r\n        let serviceIndex;\r\n        let targetName;\r\n\r\n        if(e.target.checked){\r\n            \r\n            newService = this.state.service_type + ',' + e.target.name;     \r\n            serviceArray = newService.split(',');      if(serviceArray[0] === \"\"){\r\n                serviceArray.shift();                \r\n            }\r\n            \r\n            newService = serviceArray.join(',');\r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n                        \r\n        } else{\r\n            \r\n            targetName = e.target.name\r\n            serviceArray = this.state.service_type.split(',');\r\n            serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            if(serviceArray[0] === \"\"){\r\n                serviceArray.shift()\r\n            }\r\n            \r\n            newService = serviceArray.join(', ')\r\n            \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        \r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date})\r\n    }\r\n\r\n    handleTime = (time)=>{\r\n        this.setState({time})\r\n    }\r\n\r\n    formatTime = ()=>{\r\n        let newTime;\r\n        const arr = this.state.time.split(':');\r\n        if(arr[0] > 12){\r\n            arr[0] = arr[0] - 12 ;\r\n            newTime = arr.join(':') + ' PM';\r\n        } else if(arr[0] === '00'){\r\n            arr[0] = '12'\r\n            newTime = arr.join(':') + ' AM'\r\n        } else if(arr[0] === '12'){\r\n            newTime = arr.join(':') + ' PM'\r\n        }\r\n        else{\r\n            newTime = arr.join(':') + ' AM';\r\n        }\r\n        return newTime;\r\n    }\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: `${this.formatTime()}`, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <section id=\"edit_section\">\r\n                <form onSubmit={this.handleSubmit} id=\"edit_form\">\r\n                    <fieldset>\r\n                        <header><h1>Edit your service.</h1></header>\r\n\r\n                        <div className=\"cheackbox-grid\">\r\n                            {this.state.services.map( service => (\r\n                            <label key={service.name} htmlFor={`edit_${service.name}`}>\r\n                                <input type=\"checkbox\" id={`edit_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}>                               \r\n                                </input>{service.name}\r\n                            </label>)\r\n                        )}\r\n                        </div>\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <textarea id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></textarea>\r\n\r\n                        <label htmlFor=\"edit_day\">When?</label>\r\n                        <DatePicker className=\"edit_days\" value={this.state.date} onChange={this.handleDay} required/>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <TimePicker id=\"edit_time\" onChange={this.handleTime} value={this.state.time} disableClock={true} />\r\n                        \r\n                        <button type=\"submit\" id=\"edit_submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(EditService);"]},"metadata":{},"sourceType":"module"}