{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'react-time-picker';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport default class EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n\n      if (e.target.checked) {\n        newService = this.state.service_type + ',' + e.target.name;\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        const targetName = e.target.name;\n        const serviceArray = this.state.service_type.split(',');\n        const serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n\n        if (serviceArray[0] == \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(',');\n        console.log(newService);\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleTime = time => {\n      this.setState({\n        time\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: this.state.time,\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      time: '',\n      date: new Date(),\n      price: '0.00'\n    };\n  }\n\n  componentWillMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    console.log(serviceId);\n    fetch(\"http://localhost:8000/user/service\", {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      const currentService = resData.services.filter(service => service.id == serviceId.id)[0];\n    });\n  }\n\n  render() {\n    console.log(this.state.service_type);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"edit_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"edit_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Day\"), React.createElement(DatePicker, {\n      id: \"edit_days\",\n      selected: this.state.date,\n      onChange: this.handleDay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(TimePicker, {\n      id: \"edit_time\",\n      onChange: this.handleTime,\n      value: this.state.time,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleService","e","newService","newPrice","target","checked","state","service_type","name","parseFloat","price","value","targetName","serviceArray","split","serviceIndex","indexOf","splice","shift","join","console","log","setState","handleComments","comments","handleDay","date","handleTime","time","handlePrice","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","day","best_time_reached","id","date_modified","Date","history","push","services","componentWillMount","then","res","json","resData","currentService","filter","service","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-datepicker';\r\nimport TimePicker from 'react-time-picker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n\r\nexport default class EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',\r\n            time: '',            \r\n            date: new Date(),\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        console.log(serviceId)\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => {\r\n\r\n            const currentService = resData.services.filter( service => service.id == serviceId.id)[0]\r\n            \r\n            \r\n    \r\n        })\r\n        \r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        if(e.target.checked){\r\n            \r\n            newService = this.state.service_type + ',' + e.target.name;            \r\n            \r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n                        \r\n        } else{\r\n            \r\n            const targetName = e.target.name\r\n            const serviceArray = this.state.service_type.split(',');\r\n            const serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            if(serviceArray[0] == \"\"){\r\n                serviceArray.shift()\r\n            }\r\n            \r\n            newService = serviceArray.join(',')\r\n            console.log(newService)\r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date})\r\n    }\r\n\r\n    handleTime = (time)=>{\r\n        this.setState({time})\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: this.state.time, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state.service_type)\r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`edit_${service.name}`}><input type=\"checkbox\" id={`edit_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <input type=\"text\" id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></input>\r\n\r\n                        <label htmlFor=\"edit_day\">Day</label>\r\n                        <DatePicker id=\"edit_days\" selected={this.state.date} onChange={this.handleDay}/>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <TimePicker id=\"edit_time\" onChange={this.handleTime} value={this.state.time} disableClock={true} />\r\n\r\n                        <span>${this.state.price}</span>\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}