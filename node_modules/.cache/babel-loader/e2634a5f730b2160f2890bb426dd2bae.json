{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\julis-cleaning\\\\src\\\\components\\\\user\\\\service-history\\\\ServiceHistory.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nimport { format as formatDate, getTime } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport './servicehistory.css';\nexport default class ServiceHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderServices = services => {\n      if (services) {\n        return services.map(service => React.createElement(\"li\", {\n          key: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"hi\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, \"Date set for \", formatDate(getTime(service.date_modified), 'MMM Do YYYY '), service.best_time_reached), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, service.service_type), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, service.comments), React.createElement(Link, {\n          to: \"/user/editservice?id=\".concat(service.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Edit\"), this.state.confirm ? React.createElement(React.Fragment, null, React.createElement(\"button\", {\n          onClick: this.handleCancelService,\n          className: service.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"confirm\"), React.createElement(\"button\", {\n          className: \"cancel_confirm\",\n          onClick: () => this.setState({\n            confirm: false\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"Cancel\")) : React.createElement(\"button\", {\n          type: \"button\",\n          className: \"cancel_confirm\",\n          onClick: () => this.setState({\n            confirm: true\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, \"Cancel clean up\")));\n      } else {\n        return React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Not arranged services yet, \", React.createElement(Link, {\n          to: \"/register\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Click here \"), \"to arrange first service.\");\n      }\n    };\n\n    this.handleCancelService = e => {\n      e.preventDefault();\n      fetch(\"https://fathomless-eyrie-65525.herokuapp.com/user/service\", {\n        method: 'DELETE',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          id: e.target.id\n        })\n      }).then(res => {\n        this.componentDidMount();\n      });\n    };\n\n    this.state = {\n      services: [],\n      service_type: '',\n      comments: '',\n      day: '',\n      best_time_reached: '',\n      date_created: '',\n      price: '',\n      confirm: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://fathomless-eyrie-65525.herokuapp.com/user/service', {\n      headers: {\n        'authorization': \"bearer \".concat(TokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => this.setState({\n      services: resData.services\n    }));\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"service_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"li\", {\n      key: service.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"hi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Date set for \", formatDate(getTime(service.date_modified), 'MMM Do YYYY '), service.best_time_reached), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, service.service_type), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, service.comments), React.createElement(Link, {\n      to: \"/user/editservice?id=\".concat(service.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Edit\"), this.state.confirm ? React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      onClick: this.handleCancelService,\n      className: service.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"confirm\"), React.createElement(\"button\", {\n      className: \"cancel_confirm\",\n      onClick: () => this.setState({\n        confirm: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Cancel\")) : React.createElement(\"button\", {\n      type: \"button\",\n      className: \"cancel_confirm\",\n      onClick: () => this.setState({\n        confirm: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Cancel clean up\")))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\julis-cleaning\\src\\components\\user\\service-history\\ServiceHistory.js"],"names":["React","TokenService","format","formatDate","getTime","Link","ServiceHistory","Component","constructor","props","renderServices","services","map","service","id","date_modified","best_time_reached","service_type","comments","state","confirm","handleCancelService","setState","e","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","target","then","res","componentDidMount","day","date_created","price","json","resData","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\nimport {format as formatDate, getTime} from 'date-fns'\r\nimport {Link} from 'react-router-dom';\r\nimport './servicehistory.css';\r\n\r\n\r\nexport default class ServiceHistory extends React.Component{\r\n       \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [],\r\n            service_type: '',\r\n            comments: '',\r\n            day: '',\r\n            best_time_reached: '',\r\n            date_created: '',\r\n            price: '',\r\n            confirm: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        fetch('https://fathomless-eyrie-65525.herokuapp.com/user/service', {            \r\n            headers: {\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            }\r\n        })\r\n            .then( res => res.json())\r\n            .then( resData => this.setState({services: resData.services}));\r\n    }\r\n\r\n    renderServices = (services)=>{\r\n        if(services){\r\n            return services.map( service => (\r\n                <li key={service.id}>\r\n                   \r\n                    <header className=\"hi\">Date set for {formatDate(getTime(service.date_modified), 'MMM Do YYYY ')}{service.best_time_reached}</header>\r\n                    <p>{service.service_type}</p>\r\n                    <p>{service.comments}</p>\r\n                    <Link to={`/user/editservice?id=${service.id}`}>Edit</Link>  \r\n                    {this.state.confirm ? (\r\n                    <>\r\n                        <button onClick={this.handleCancelService} className={service.id}>confirm</button> \r\n                        \r\n                        <button className=\"cancel_confirm\" onClick={()=> this.setState({confirm: false})}>Cancel</button>\r\n                    </>) : <button type=\"button\" className=\"cancel_confirm\" onClick={() => this.setState({confirm: true})} >Cancel clean up</button>}                         \r\n                </li>)) \r\n        } else {\r\n            return <h2>Not arranged services yet, <Link to=\"/register\">Click here </Link>to arrange first service.</h2>\r\n        }\r\n    }\r\n\r\n\r\n    handleCancelService = (e)=>{\r\n        e.preventDefault()\r\n\r\n        fetch(`https://fathomless-eyrie-65525.herokuapp.com/user/service`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({id: e.target.id})\r\n\r\n        })\r\n            .then( res => {\r\n                this.componentDidMount();\r\n            })\r\n\r\n        \r\n    }\r\n\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <section id=\"service_header\">\r\n                <ul>\r\n                    {this.state.services.map( service => (\r\n                    <li key={service.id}>\r\n                       \r\n                        <header className=\"hi\">Date set for {formatDate(getTime(service.date_modified), 'MMM Do YYYY ')}{service.best_time_reached}</header>\r\n                        <p>{service.service_type}</p>\r\n                        <p>{service.comments}</p>\r\n                        <Link to={`/user/editservice?id=${service.id}`}>Edit</Link>  \r\n                        {this.state.confirm ? (\r\n                        <>\r\n                            <button onClick={this.handleCancelService} className={service.id}>confirm</button> \r\n                            \r\n                            <button className=\"cancel_confirm\" onClick={()=> this.setState({confirm: false})}>Cancel</button>\r\n                        </>) : <button type=\"button\" className=\"cancel_confirm\" onClick={() => this.setState({confirm: true})} >Cancel clean up</button>}                         \r\n                    </li>))}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}