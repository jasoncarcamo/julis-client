{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\request-service\\\\RequestService.js\";\nimport React from 'react';\nimport TokenService from '../../../services/TokenService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport TimePicker from 'react-time-picker';\nexport default class RequestService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n\n      if (e.target.checked) {\n        if (this.state.service_type.length == 0) {\n          this.setState({\n            service_type: e.target.name\n          });\n        }\n\n        newService = this.state.service_type + ', ' + e.target.name;\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n        this.setState({\n          service_type: newService\n        });\n      } else {\n        const targetName = e.target.name;\n        const serviceArray = this.state.service_type.split(',');\n        const serviceIndex = serviceArray.indexOf(targetName);\n        console.log(e.target.name);\n        console.log(serviceIndex);\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleBestTime = time => {\n      this.setState({\n        time\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(TokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.day,\n          best_time_reached: this.state.best_time_reached,\n          price: this.state.price,\n          user_id: this.props.user,\n          date_modified: new Date()\n        })\n      }).then(res => res.json()).then(resData => this.props.history.push('/user/services'));\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      date: new Date(),\n      service_type: '',\n      day: '',\n      time: '',\n      comments: '',\n      price: '0.00'\n    };\n  }\n\n  render() {\n    console.log(this.state.service_type);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"time-picker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Make a request\"), this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"req_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"req_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"req_days\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"When?\"), React.createElement(DatePicker, {\n      id: \"req_days\",\n      selected: this.state.date,\n      onChange: this.handleDay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"What time?\"), React.createElement(TimePicker, {\n      id: \"req_time\",\n      onChange: this.handleBestTime,\n      value: this.state.time,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"req_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Comments?\"), React.createElement(\"textarea\", {\n      id: \"req_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\request-service\\RequestService.js"],"names":["React","TokenService","DatePicker","TimePicker","RequestService","Component","constructor","props","handleService","e","newService","newPrice","target","checked","state","service_type","length","setState","name","parseFloat","price","value","targetName","serviceArray","split","serviceIndex","indexOf","console","log","handleDay","date","handleBestTime","time","handleComments","comments","handlePrice","handleSubmit","preventDefault","fetch","method","headers","getAuthToken","body","JSON","stringify","day","best_time_reached","user_id","user","date_modified","Date","then","res","json","resData","history","push","services","render","map","service"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport TokenService from '../../../services/TokenService';\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport TimePicker from 'react-time-picker';\r\n\r\nexport default class RequestService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            date: new Date(),\r\n            service_type: '',\r\n            day: '',\r\n            time: '',\r\n            comments: '',\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        if(e.target.checked){\r\n            if(this.state.service_type.length == 0){\r\n                this.setState({ service_type: e.target.name})\r\n            }\r\n            newService = this.state.service_type + ', ' + e.target.name;\r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n            this.setState({ service_type: newService});\r\n        } else{\r\n            const targetName = e.target.name\r\n            const serviceArray = this.state.service_type.split(',');\r\n            const serviceIndex = serviceArray.indexOf(targetName)\r\n            console.log(e.target.name)\r\n            console.log(serviceIndex)\r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date});        \r\n    }\r\n\r\n    handleBestTime = (time)=>{\r\n        this.setState({time});\r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({comments: e.target.value});\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({price: e.target.value});\r\n    }\r\n\r\n\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${TokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.day, best_time_reached: this.state.best_time_reached, price: this.state.price, user_id: this.props.user, date_modified: new Date()})\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => this.props.history.push('/user/services'));\r\n    }\r\n\r\n    \r\n    render(){\r\n        console.log(this.state.service_type)\r\n        return (\r\n            <section>\r\n                \r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"time-picker\"></div>\r\n                    <fieldset>\r\n                        <header>Make a request</header>\r\n                        \r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`req_${service.name}`}><input type=\"checkbox\" id={`req_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"req_days\">When?</label>\r\n                        <DatePicker id=\"req_days\" selected={this.state.date} onChange={this.handleDay}/>\r\n\r\n                        <label htmlFor=\"req_time\">What time?</label>\r\n                        <TimePicker id=\"req_time\" onChange={this.handleBestTime} value={this.state.time} disableClock={true}/>\r\n\r\n                        <label htmlFor=\"req_comments\">Comments?</label>\r\n                        <textarea id=\"req_comments\" onChange={this.handleComments} value={this.state.comments}></textarea>\r\n\r\n                        <span>${this.state.price}</span> \r\n\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}