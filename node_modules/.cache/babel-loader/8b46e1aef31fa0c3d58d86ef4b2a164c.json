{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'react-time-picker';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport default class EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n      const targetName = e.target.name;\n      let serviceArray = this.state.service_type.split(',');\n      let serviceIndex = serviceArray.indexOf(targetName);\n\n      if (e.target.checked) {\n        if (this.state.service_type.length === undefined) {\n          this.setState({\n            service_type: e.target.name\n          });\n        } else {\n          if (serviceIndex != -1) {\n            alert();\n          }\n\n          newService = this.state.service_type + ',' + e.target.name;\n        }\n\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        serviceArray.splice(serviceIndex, 1);\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleTime = e => {\n      this.setState({\n        best_time_reached: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: this.state.time,\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      date: new Date(),\n      price: '0.00'\n    };\n  }\n\n  componentWillMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    console.log(serviceId);\n    fetch(\"http://localhost:8000/user/service\", {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      const currentService = resData.services.filter(service => service.id == serviceId.id)[0];\n      console.log(currentService);\n      this.setState({\n        service_type: currentService.service_type,\n        comments: currentService.comments\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"edit_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"edit_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Day\"), React.createElement(DatePicker, {\n      id: \"edit_days\",\n      selected: this.state.date,\n      onChange: this.handleDay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(TimePicker, {\n      id: \"edit_time\",\n      onChange: this.handleBestTime,\n      value: this.state.time,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleService","e","newService","newPrice","targetName","target","name","serviceArray","state","service_type","split","serviceIndex","indexOf","checked","length","undefined","setState","alert","parseFloat","price","value","splice","join","handleComments","comments","handleDay","date","handleTime","best_time_reached","handlePrice","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","day","time","id","date_modified","Date","history","push","services","componentWillMount","console","log","then","res","json","resData","currentService","filter","service","render","map","handleBestTime"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-datepicker';\r\nimport TimePicker from 'react-time-picker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n\r\nexport default class EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',            \r\n            date: new Date(),\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        console.log(serviceId)\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => {\r\n\r\n            const currentService = resData.services.filter( service => service.id == serviceId.id)[0]\r\n            console.log(currentService)\r\n            \r\n            this.setState({ service_type: currentService.service_type, comments: currentService.comments,\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        const targetName = e.target.name\r\n        let serviceArray = this.state.service_type.split(',');\r\n        let serviceIndex = serviceArray.indexOf(targetName)\r\n        if(e.target.checked){\r\n            if(this.state.service_type.length === undefined){\r\n                this.setState({ service_type: e.target.name})\r\n            } else{\r\n                if(serviceIndex != -1){\r\n                    alert()\r\n                }\r\n                newService = this.state.service_type + ',' + e.target.name;\r\n            }\r\n            \r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n            \r\n        } else{\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            \r\n            newService = serviceArray.join(',')\r\n    \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date})\r\n    }\r\n\r\n    handleTime = (e)=>{\r\n        this.setState({ best_time_reached: e.target.value})\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: this.state.time, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state)\r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`edit_${service.name}`}><input type=\"checkbox\" id={`edit_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <input type=\"text\" id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></input>\r\n\r\n                        <label htmlFor=\"edit_day\">Day</label>\r\n                        <DatePicker id=\"edit_days\" selected={this.state.date} onChange={this.handleDay}/>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <TimePicker id=\"edit_time\" onChange={this.handleBestTime} value={this.state.time} disableClock={true} />\r\n\r\n                        <span>${this.state.price}</span>\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}