{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'react-time-picker';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport default class EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n\n      if (e.target.checked) {\n        if (this.state.service_type.length === undefined) {\n          this.setState({\n            service_type: e.target.name\n          });\n        } else {\n          newService = this.state.service_type + ',' + e.target.name;\n        }\n\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        const targetName = e.target.name;\n        const serviceArray = this.state.service_type.split(',');\n        const serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = e => {\n      this.setState({\n        day: e.target.value\n      });\n    };\n\n    this.handleTime = e => {\n      this.setState({\n        best_time_reached: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: this.state.time,\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      date: new Date(),\n      price: ''\n    };\n  }\n\n  componentWillMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    console.log(serviceId);\n    fetch(\"http://localhost:8000/user/service\", {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      const currentService = resData.services.filter(service => service.id == serviceId.id)[0];\n      this.setState({\n        service_type: currentService.service_type,\n        comments: currentService.comments,\n        day: currentService.day,\n        price: currentService.price\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"req_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"req_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Day\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_day\",\n      onChange: this.handleDay,\n      value: this.state.day,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_time\",\n      onChange: this.handleTime,\n      value: this.state.best_time_reached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Price:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_price\",\n      onChange: this.handlePrice,\n      value: this.state.price,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleService","e","newService","newPrice","target","checked","state","service_type","length","undefined","setState","name","parseFloat","price","value","targetName","serviceArray","split","serviceIndex","indexOf","splice","join","handleComments","comments","handleDay","day","handleTime","best_time_reached","handlePrice","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","date","time","id","date_modified","Date","history","push","services","componentWillMount","console","log","then","res","json","resData","currentService","filter","service","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-datepicker';\r\nimport TimePicker from 'react-time-picker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n\r\nexport default class EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',            \r\n            date: new Date(),\r\n            price: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        console.log(serviceId)\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => {\r\n\r\n            const currentService = resData.services.filter( service => service.id == serviceId.id)[0]\r\n            \r\n            this.setState({ service_type: currentService.service_type, comments: currentService.comments, day: currentService.day, price: currentService.price\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        if(e.target.checked){\r\n            if(this.state.service_type.length === undefined){\r\n                this.setState({ service_type: e.target.name})\r\n            } else{\r\n                 \r\n                newService = this.state.service_type + ',' + e.target.name;\r\n            }\r\n            \r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n            \r\n        } else{\r\n\r\n            const targetName = e.target.name\r\n            const serviceArray = this.state.service_type.split(',');\r\n            const serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            \r\n            newService = serviceArray.join(',')\r\n    \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (e)=>{\r\n        this.setState({ day: e.target.value})\r\n    }\r\n\r\n    handleTime = (e)=>{\r\n        this.setState({ best_time_reached: e.target.value})\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: this.state.time, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`req_${service.name}`}><input type=\"checkbox\" id={`req_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <input type=\"text\" id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></input>\r\n\r\n                        <label htmlFor=\"edit_day\">Day</label>\r\n                        <input type=\"text\" id=\"edit_day\" onChange={this.handleDay} value={this.state.day}></input>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <input type=\"text\" id=\"edit_time\" onChange={this.handleTime} value={this.state.best_time_reached}></input>\r\n\r\n                        <label htmlFor=\"edit_price\">Price:\r\n                        </label>\r\n                        <input type=\"text\" id=\"edit_price\" onChange={this.handlePrice} value={this.state.price}></input>\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}