{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nexport default class EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      this.setState({\n        serivce_type: e.target.value\n      });\n    };\n\n    this.handleComments = e => {\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = e => {\n      this.setState({\n        day: e.target.value\n      });\n    };\n\n    this.handleTime = e => {\n      this.setState({\n        best_time_reached: e.target.value\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.day,\n          best_time_reached: this.state.best_time_reached,\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      service_type: '1',\n      comments: 'wqeqewq',\n      day: 'ewqwe',\n      best_time_reached: '1',\n      price: '1'\n    };\n  }\n\n  componentWillMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    console.log(serviceId);\n    fetch(\"http://localhost:8000/user/service\", {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      const currentService = resData.services.filter(service => service.id == serviceId.id)[0];\n      this.setState({\n        serivce_type: currentService.serivce_type,\n        comments: currentService.comments,\n        day: currentService.day,\n        price: currentService.price\n      });\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"edit_type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Service type:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_type\",\n      onChange: this.handleService,\n      value: this.state.service_type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Day\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_day\",\n      onChange: this.handleDay,\n      value: this.state.service_type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Price:\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"edit_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","tokenService","queryString","EditService","Component","constructor","props","handleService","e","setState","serivce_type","target","value","handleComments","comments","handleDay","day","handleTime","best_time_reached","handlePrice","price","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","service_type","state","id","date_modified","Date","history","push","componentWillMount","console","log","then","res","json","resData","currentService","services","filter","service","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAGA,eAAe,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAAyC;AACpDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SA+BlBC,aA/BkB,GA+BDC,CAAD,IAAK;AACjB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEF,CAAC,CAACG,MAAF,CAASC;AAAzB,OAAd;AACH,KAjCiB;;AAAA,SAmClBC,cAnCkB,GAmCAL,CAAD,IAAK;AAClB,WAAKC,QAAL,CAAc;AAAEK,QAAAA,QAAQ,EAAEN,CAAC,CAACG,MAAF,CAASC;AAArB,OAAd;AACH,KArCiB;;AAAA,SAuClBG,SAvCkB,GAuCLP,CAAD,IAAK;AACb,WAAKC,QAAL,CAAc;AAAEO,QAAAA,GAAG,EAAER,CAAC,CAACG,MAAF,CAASC;AAAhB,OAAd;AACH,KAzCiB;;AAAA,SA2ClBK,UA3CkB,GA2CJT,CAAD,IAAK;AACd,WAAKC,QAAL,CAAc;AAAES,QAAAA,iBAAiB,EAAEV,CAAC,CAACG,MAAF,CAASC;AAA9B,OAAd;AACH,KA7CiB;;AAAA,SA+ClBO,WA/CkB,GA+CHX,CAAD,IAAK;AACf,WAAKC,QAAL,CAAc;AAAEW,QAAAA,KAAK,EAAEZ,CAAC,CAACG,MAAF,CAASC;AAAlB,OAAd;AACH,KAjDiB;;AAAA,SAmDlBS,YAnDkB,GAmDFb,CAAD,IAAK;AAEhBA,MAAAA,CAAC,CAACc,cAAF;AACA,YAAMC,SAAS,GAAGrB,WAAW,CAACsB,KAAZ,CAAkB,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBC,MAAtC,CAAlB;AACAC,MAAAA,KAAK,uCAAuC;AACxCC,QAAAA,MAAM,EAAE,OADgC;AAExCC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,4CAA2B5B,YAAY,CAAC6B,YAAb,EAA3B;AAFK,SAF+B;AAMxCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,UAAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD,YAA1B;AAAwCpB,UAAAA,QAAQ,EAAE,KAAKqB,KAAL,CAAWrB,QAA7D;AAAuEE,UAAAA,GAAG,EAAE,KAAKmB,KAAL,CAAWnB,GAAvF;AAA4FE,UAAAA,iBAAiB,EAAE,KAAKiB,KAAL,CAAWjB,iBAA1H;AAA6IE,UAAAA,KAAK,EAAE,KAAKe,KAAL,CAAWf,KAA/J;AAAsKgB,UAAAA,EAAE,EAAEb,SAAS,CAACa,EAApL;AAAwLC,UAAAA,aAAa,EAAE,IAAIC,IAAJ;AAAvM,SAAf;AANkC,OAAvC,CAAL;AAQA,WAAKhC,KAAL,CAAWiC,OAAX,CAAmBC,IAAnB,CAAwB,gBAAxB;AACH,KAhEiB;;AAEd,SAAKL,KAAL,GAAa;AACTD,MAAAA,YAAY,EAAE,GADL;AAETpB,MAAAA,QAAQ,EAAE,SAFD;AAGTE,MAAAA,GAAG,EAAE,OAHI;AAITE,MAAAA,iBAAiB,EAAE,GAJV;AAKTE,MAAAA,KAAK,EAAE;AALE,KAAb;AAOH;;AAEDqB,EAAAA,kBAAkB,GAAE;AAChB,UAAMlB,SAAS,GAAGrB,WAAW,CAACsB,KAAZ,CAAkB,KAAKlB,KAAL,CAAWmB,QAAX,CAAoBC,MAAtC,CAAlB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,SAAZ;AACAI,IAAAA,KAAK,uCAAuC;AACxCE,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,0CAA2B5B,YAAY,CAAC6B,YAAb,EAA3B;AAFK;AAD+B,KAAvC,CAAL,CAMCc,IAND,CAMOC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANd,EAOCF,IAPD,CAOMG,OAAO,IAAI;AAEb,YAAMC,cAAc,GAAGD,OAAO,CAACE,QAAR,CAAiBC,MAAjB,CAAyBC,OAAO,IAAIA,OAAO,CAACf,EAAR,IAAcb,SAAS,CAACa,EAA5D,EAAgE,CAAhE,CAAvB;AAEA,WAAK3B,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEsC,cAAc,CAACtC,YAA/B;AAA6CI,QAAAA,QAAQ,EAAEkC,cAAc,CAAClC,QAAtE;AAAgFE,QAAAA,GAAG,EAAEgC,cAAc,CAAChC,GAApG;AAAyGI,QAAAA,KAAK,EAAE4B,cAAc,CAAC5B;AAA/H,OAAd;AAEH,KAbD;AAcAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAjB;AACH;;AAqCDiB,EAAAA,MAAM,GAAE;AAEJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,QAAQ,EAAE,KAAK/B,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAkC,MAAA,QAAQ,EAAE,KAAKd,aAAjD;AAAgE,MAAA,KAAK,EAAE,KAAK4B,KAAL,CAAWD,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII;AAAO,MAAA,OAAO,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,EAMI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,eAAtB;AAAsC,MAAA,QAAQ,EAAE,KAAKrB,cAArD;AAAqE,MAAA,KAAK,EAAE,KAAKsB,KAAL,CAAWrB,QAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAQI;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARJ,EASI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,UAAtB;AAAiC,MAAA,QAAQ,EAAE,KAAKC,SAAhD;AAA2D,MAAA,KAAK,EAAE,KAAKoB,KAAL,CAAWD,YAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAWI;AAAO,MAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXJ,EAaI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,EAeI;AAAO,MAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAfJ,EAiBI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBJ,EAkBI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ,CADJ,CADJ,CADJ;AA0BH;;AA/FmD","sourcesContent":["import React from 'react';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\n\r\n\r\nexport default class EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            service_type: '1',\r\n            comments: 'wqeqewq',\r\n            day: 'ewqwe',\r\n            best_time_reached: '1',\r\n            price: '1'\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        console.log(serviceId)\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => {\r\n\r\n            const currentService = resData.services.filter( service => service.id == serviceId.id)[0]\r\n            \r\n            this.setState({ serivce_type: currentService.serivce_type, comments: currentService.comments, day: currentService.day, price: currentService.price\r\n            })\r\n        })\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleService = (e)=>{\r\n        this.setState({ serivce_type: e.target.value})\r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (e)=>{\r\n        this.setState({ day: e.target.value})\r\n    }\r\n\r\n    handleTime = (e)=>{\r\n        this.setState({ best_time_reached: e.target.value})\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.day, best_time_reached: this.state.best_time_reached, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        <label htmlFor=\"edit_type\">Service type:</label>\r\n                        <input type=\"text\" id=\"edit_type\" onChange={this.handleService} value={this.state.service_type}></input>\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <input type=\"text\" id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></input>\r\n\r\n                        <label htmlFor=\"edit_day\">Day</label>\r\n                        <input type=\"text\" id=\"edit_day\" onChange={this.handleDay} value={this.state.service_type}></input>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <input type=\"text\" id=\"edit_time\"></input>\r\n\r\n                        <label htmlFor=\"edit_price\">Price:\r\n                        </label>\r\n                        <input type=\"text\" id=\"edit_price\"></input>\r\n                        <button type=\"submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}