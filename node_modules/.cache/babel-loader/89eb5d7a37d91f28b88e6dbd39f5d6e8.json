{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\Documents\\\\GitHub\\\\clean-com\\\\src\\\\components\\\\user\\\\edit-service\\\\EditService.js\";\nimport React from 'react';\nimport tokenService from '../../../services/TokenService';\nimport queryString from 'query-string';\nimport DatePicker from 'react-datepicker';\nimport TimePicker from 'react-time-picker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './editservice.css';\nexport default class EditService extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleService = e => {\n      let newService;\n      let newPrice;\n      let serviceArray;\n      let serviceIndex;\n      let targetName;\n\n      if (e.target.checked) {\n        newService = this.state.service_type + ',' + e.target.name;\n        serviceArray = newService.split(',');\n\n        if (serviceArray[0] == \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(',');\n        newPrice = parseFloat(this.state.price) + parseFloat(e.target.value);\n      } else {\n        targetName = e.target.name;\n        serviceArray = this.state.service_type.split(',');\n        serviceIndex = serviceArray.indexOf(targetName);\n        serviceArray.splice(serviceIndex, 1);\n\n        if (serviceArray[0] == \"\") {\n          serviceArray.shift();\n        }\n\n        newService = serviceArray.join(', ');\n        newPrice = parseFloat(this.state.price) - parseFloat(e.target.value);\n      }\n\n      this.setState({\n        service_type: newService\n      });\n      this.setState({\n        price: newPrice\n      });\n    };\n\n    this.handleComments = e => {\n      console.log(this.state.service_type);\n      this.setState({\n        comments: e.target.value\n      });\n    };\n\n    this.handleDay = date => {\n      this.setState({\n        date\n      });\n    };\n\n    this.handleTime = time => {\n      this.setState({\n        time\n      });\n    };\n\n    this.handlePrice = e => {\n      this.setState({\n        price: e.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      const serviceId = queryString.parse(this.props.location.search);\n      fetch(\"http://localhost:8000/user/service\", {\n        method: 'PATCH',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': \"bearer \".concat(tokenService.getAuthToken())\n        },\n        body: JSON.stringify({\n          service_type: this.state.service_type,\n          comments: this.state.comments,\n          day: this.state.date,\n          best_time_reached: this.state.time,\n          price: this.state.price,\n          id: serviceId.id,\n          date_modified: new Date()\n        })\n      });\n      this.props.history.push('/user/services');\n    };\n\n    this.state = {\n      services: [{\n        name: 'Windows',\n        price: '20.00'\n      }, {\n        name: 'Refridgerator',\n        price: '20.00'\n      }, {\n        name: 'Walls',\n        price: '30.00'\n      }],\n      service_type: '',\n      comments: '',\n      time: '',\n      date: new Date(),\n      price: '0.00'\n    };\n  }\n\n  componentWillMount() {\n    const serviceId = queryString.parse(this.props.location.search);\n    console.log(serviceId);\n    fetch(\"http://localhost:8000/user/service\", {\n      headers: {\n        'content-type': 'application/json',\n        'authorization': \"bearer \".concat(tokenService.getAuthToken())\n      }\n    }).then(res => res.json()).then(resData => {\n      const currentService = resData.services.filter(service => service.id == serviceId.id)[0];\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      id: \"edit_section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, this.state.services.map(service => React.createElement(\"label\", {\n      key: service.name,\n      htmlFor: \"edit_\".concat(service.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"edit_\".concat(service.name),\n      name: service.name,\n      value: service.price,\n      onChange: this.handleService,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), service.name)), React.createElement(\"label\", {\n      htmlFor: \"edit_comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Comments ?\"), React.createElement(\"textarea\", {\n      id: \"edit_comments\",\n      onChange: this.handleComments,\n      value: this.state.comments,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_day\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Day\"), React.createElement(DatePicker, {\n      id: \"edit_days\",\n      selected: this.state.date,\n      onChange: this.handleDay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"edit_time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Time:\"), React.createElement(TimePicker, {\n      id: \"edit_time\",\n      onChange: this.handleTime,\n      value: this.state.time,\n      disableClock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"edit_price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"$\", this.state.price), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"edit_submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Go\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\jason\\OneDrive\\Documents\\GitHub\\clean-com\\src\\components\\user\\edit-service\\EditService.js"],"names":["React","tokenService","queryString","DatePicker","TimePicker","EditService","Component","constructor","props","handleService","e","newService","newPrice","serviceArray","serviceIndex","targetName","target","checked","state","service_type","name","split","shift","join","parseFloat","price","value","indexOf","splice","setState","handleComments","console","log","comments","handleDay","date","handleTime","time","handlePrice","handleSubmit","preventDefault","serviceId","parse","location","search","fetch","method","headers","getAuthToken","body","JSON","stringify","day","best_time_reached","id","date_modified","Date","history","push","services","componentWillMount","then","res","json","resData","currentService","filter","service","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport tokenService from '../../../services/TokenService';\r\nimport queryString from 'query-string';\r\nimport DatePicker from 'react-datepicker';\r\nimport TimePicker from 'react-time-picker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './editservice.css';\r\n\r\nexport default class EditService extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            services: [\r\n                {\r\n                    name: 'Windows',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Refridgerator',\r\n                    price: '20.00'\r\n                },\r\n                {\r\n                    name: 'Walls',\r\n                    price: '30.00'\r\n                }\r\n            ],\r\n            service_type: '',\r\n            comments: '',\r\n            time: '',            \r\n            date: new Date(),\r\n            price: '0.00'\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        console.log(serviceId)\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            }\r\n        })\r\n        .then( res => res.json())\r\n        .then(resData => {\r\n\r\n            const currentService = resData.services.filter( service => service.id == serviceId.id)[0]\r\n            \r\n            \r\n    \r\n        })\r\n        \r\n    }\r\n\r\n    handleService= (e)=>{\r\n        let newService;\r\n        let newPrice;\r\n        let serviceArray;\r\n        let serviceIndex;\r\n        let targetName;\r\n\r\n        if(e.target.checked){\r\n            \r\n            newService = this.state.service_type + ',' + e.target.name;     \r\n            serviceArray = newService.split(',');      if(serviceArray[0]== \"\"){\r\n                serviceArray.shift();                \r\n            }\r\n            \r\n            newService = serviceArray.join(',');\r\n            newPrice = parseFloat(this.state.price) + parseFloat(e.target.value)\r\n                        \r\n        } else{\r\n            \r\n            targetName = e.target.name\r\n            serviceArray = this.state.service_type.split(',');\r\n            serviceIndex = serviceArray.indexOf(targetName)\r\n            \r\n            serviceArray.splice(serviceIndex, 1)\r\n            if(serviceArray[0] == \"\"){\r\n                serviceArray.shift()\r\n            }\r\n            \r\n            newService = serviceArray.join(', ')\r\n            \r\n            newPrice = parseFloat(this.state.price) - parseFloat(e.target.value)\r\n        }\r\n        \r\n        this.setState({service_type: newService})\r\n        this.setState({ price: newPrice});\r\n       \r\n    }\r\n\r\n    handleComments = (e)=>{\r\n        console.log(this.state.service_type)\r\n        this.setState({ comments: e.target.value})\r\n    }\r\n\r\n    handleDay = (date)=>{\r\n        this.setState({date})\r\n    }\r\n\r\n    handleTime = (time)=>{\r\n        this.setState({time})\r\n    }\r\n\r\n    handlePrice = (e)=>{\r\n        this.setState({ price: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n        const serviceId = queryString.parse(this.props.location.search);\r\n        fetch(`http://localhost:8000/user/service`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'authorization': `bearer ${tokenService.getAuthToken()}`\r\n            },\r\n            body: JSON.stringify({service_type: this.state.service_type, comments: this.state.comments, day: this.state.date, best_time_reached: this.state.time, price: this.state.price, id: serviceId.id, date_modified: new Date()})\r\n        })\r\n        this.props.history.push('/user/services')\r\n    }\r\n\r\n    render(){\r\n        \r\n        return (\r\n            <section id=\"edit_section\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <fieldset>\r\n                        {this.state.services.map( service => (<label key={service.name} htmlFor={`edit_${service.name}`}><input type=\"checkbox\" id={`edit_${service.name}`} name={service.name} value={service.price} onChange={this.handleService}></input>{service.name}</label>))}\r\n\r\n                        <label htmlFor=\"edit_comments\">Comments\r\n                        ?</label>\r\n                        <textarea id=\"edit_comments\" onChange={this.handleComments} value={this.state.comments}></textarea>\r\n\r\n                        <label htmlFor=\"edit_day\">Day</label>\r\n                        <DatePicker id=\"edit_days\" selected={this.state.date} onChange={this.handleDay}/>\r\n\r\n                        <label htmlFor=\"edit_time\">Time:\r\n                        </label>\r\n                        <TimePicker id=\"edit_time\" onChange={this.handleTime} value={this.state.time} disableClock={true} />\r\n\r\n                        <span id=\"edit_price\">${this.state.price}</span>\r\n                        <button type=\"submit\" id=\"edit_submit\">Go</button>\r\n                    </fieldset>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}